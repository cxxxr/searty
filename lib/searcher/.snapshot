cl-ppcre-20220220-git/api.lisp:15134:15139:(defun scan-to-strings (regex target-string &key (start 0)
cl-ppcre-20220220-git/api.lisp:26742:26747:(defun count-matches (regex target-string
cl-ppcre-20220220-git/api.lisp:27432:27437:(defun all-matches (regex target-string
cl-ppcre-20220220-git/api.lisp:28434:28439:(defun all-matches-as-strings (regex target-string
cl-ppcre-20220220-git/api.lisp:29481:29486:(defun split (regex target-string
cl-ppcre-20220220-git/api.lisp:33138:33143:(defun string-case-modifier (str from to start end)
cl-ppcre-20220220-git/api.lisp:39668:39673:  (defun build-replacement-template (replacement)
cl-ppcre-20220220-git/api.lisp:41907:41912:(defun build-replacement (replacement-template
cl-ppcre-20220220-git/api.lisp:46341:46346:(defun replace-aux (target-string replacement pos-list reg-list start end
cl-ppcre-20220220-git/api.lisp:48747:48752:(defun regex-replace (regex target-string replacement &key
cl-ppcre-20220220-git/api.lisp:51411:51416:(defun regex-replace-all (regex target-string replacement &key
cl-ppcre-20220220-git/api.lisp:57329:57334:(defun regex-apropos-list (regex &optional packages &key (case-insensitive t))
cl-ppcre-20220220-git/api.lisp:57803:57808:(defun print-symbol-info (symbol)
cl-ppcre-20220220-git/api.lisp:59802:59807:(defun regex-apropos (regex &optional packages &key (case-insensitive t))
cl-ppcre-20220220-git/api.lisp:60339:60344:  (defun quote-meta-chars (string &key (start 0) (end (length string)))
cl-ppcre-20220220-git/api.lisp:60795:60800:  (defun quote-sections (string)
cl-ppcre-20220220-git/api.lisp:62014:62019:  (defun clean-comments (string &optional extended-mode)
cl-ppcre-20220220-git/api.lisp:63087:63092:(defun parse-tree-synonym (symbol)
cl-ppcre-20220220-git/api.lisp:63281:63286:(defun (setf parse-tree-synonym) (new-parse-tree symbol)
cl-ppcre-20220220-git/charmap.lisp:2383:2388:(defun in-charmap-p (char charmap)
cl-ppcre-20220220-git/charmap.lisp:3106:3111:(defun charmap-contents (charmap)
cl-ppcre-20220220-git/charmap.lisp:3597:3602:(defun make-charmap (start end test-function &optional complementp)
cl-ppcre-20220220-git/charmap.lisp:4823:4828:(defun create-charmap-from-test-function (test-function start end)
cl-ppcre-20220220-git/charset.lisp:2040:2045:(defun make-char-vector (size)
cl-ppcre-20220220-git/charset.lisp:3214:3219:(defun mix (code hash)
cl-ppcre-20220220-git/charset.lisp:3721:3726:(defun compute-index (hash vector)
cl-ppcre-20220220-git/charset.lisp:3935:3940:(defun in-charset-p (char set)
cl-ppcre-20220220-git/charset.lisp:5656:5661:(defun add-to-charset (char set)
cl-ppcre-20220220-git/charset.lisp:5956:5961:(defun %add-to-charset (char set count)
cl-ppcre-20220220-git/charset.lisp:7458:7463:(defun %add-to-charset/expand (char set)
cl-ppcre-20220220-git/charset.lisp:9079:9084:(defun map-charset (function charset)
cl-ppcre-20220220-git/charset.lisp:9862:9867:(defun create-charset-from-test-function (test-function start end)
cl-ppcre-20220220-git/chartest.lisp:1542:1547:(defun create-hash-table-from-test-function (test-function start end)
cl-ppcre-20220220-git/chartest.lisp:2048:2053:(defun create-optimized-test-function (test-function &key
cl-ppcre-20220220-git/closures.lisp:1664:1669:(defun *string*= (string2 start1 end1 start2 end2)
cl-ppcre-20220220-git/closures.lisp:2226:2231:(defun *string*-equal (string2 start1 end1 start2 end2)
cl-ppcre-20220220-git/closures.lisp:13534:13539:(defun word-boundary-p (start-pos)
cl-ppcre-20220220-git/convert.lisp:2281:2286:(defun set-flag (token)
cl-ppcre-20220220-git/convert.lisp:3423:3428:(defun convert-char-class-to-test-function (list invertedp case-insensitive-p)
cl-ppcre-20220220-git/convert.lisp:8605:8610:(defun maybe-split-repetition (regex
cl-ppcre-20220220-git/convert.lisp:11952:11957:(defun maybe-accumulate (str)
cl-ppcre-20220220-git/convert.lisp:14498:14503:(defun convert-aux (parse-tree)
cl-ppcre-20220220-git/convert.lisp:39247:39252:(defun convert (parse-tree)
cl-ppcre-20220220-git/lexer.lisp:1964:1969:(defun map-char-to-special-char-class (chr)
cl-ppcre-20220220-git/lexer.lisp:2761:2766:(defun make-lexer (string)
cl-ppcre-20220220-git/lexer.lisp:2975:2980:(defun end-of-string-p (lexer)
cl-ppcre-20220220-git/lexer.lisp:3188:3193:(defun looking-at-p (lexer chr)
cl-ppcre-20220220-git/lexer.lisp:3519:3524:(defun next-char-non-extended (lexer)
cl-ppcre-20220220-git/lexer.lisp:3871:3876:(defun next-char (lexer)
cl-ppcre-20220220-git/lexer.lisp:7031:7036:(defun fail (lexer)
cl-ppcre-20220220-git/lexer.lisp:7380:7385:(defun get-number (lexer &key (radix 10) max-length no-whitespace-p)
cl-ppcre-20220220-git/lexer.lisp:8791:8796:(defun try-number (lexer &key (radix 10) max-length no-whitespace-p)
cl-ppcre-20220220-git/lexer.lisp:9314:9319:(defun make-char-from-code (number error-pos)
cl-ppcre-20220220-git/lexer.lisp:9856:9861:(defun unescape-char (lexer)
cl-ppcre-20220220-git/lexer.lisp:11969:11974:(defun read-char-property (lexer first-char)
cl-ppcre-20220220-git/lexer.lisp:12757:12762:(defun collect-char-class (lexer)
cl-ppcre-20220220-git/lexer.lisp:17245:17250:(defun maybe-parse-flags (lexer)
cl-ppcre-20220220-git/lexer.lisp:18696:18701:(defun get-quantifier (lexer)
cl-ppcre-20220220-git/lexer.lisp:20605:20610:(defun parse-register-name-aux (lexer)
cl-ppcre-20220220-git/lexer.lisp:21809:21814:(defun unget-token (lexer)
cl-ppcre-20220220-git/lexer.lisp:22115:22120:(defun get-token (lexer)
cl-ppcre-20220220-git/lexer.lisp:33186:33191:(defun start-of-subexpr-p (lexer)
cl-ppcre-20220220-git/optimize.lisp:21632:21637:(defun end-string (regex)
cl-ppcre-20220220-git/parser.lisp:1850:1855:(defun group (lexer)
cl-ppcre-20220220-git/parser.lisp:8409:8414:(defun greedy-quant (lexer)
cl-ppcre-20220220-git/parser.lisp:9003:9008:(defun quant (lexer)
cl-ppcre-20220220-git/parser.lisp:9580:9585:(defun seq (lexer)
cl-ppcre-20220220-git/parser.lisp:11911:11916:(defun reg-expr (lexer)
cl-ppcre-20220220-git/parser.lisp:13901:13906:(defun parse-string (string)
cl-ppcre-20220220-git/repetition-closures.lisp:5452:5457:(defun create-greedy-everything-matcher (maximum min-rest next-fn)
cl-ppcre-20220220-git/scanner.lisp:2629:2634:(defun create-bmh-matcher (pattern case-insensitive-p)
cl-ppcre-20220220-git/scanner.lisp:4732:4737:(defun create-char-searcher (chr case-insensitive-p)
cl-ppcre-20220220-git/scanner.lisp:5254:5259:(defun newline-skipper (start-pos)
cl-ppcre-20220220-git/scanner.lisp:16206:16211:(defun create-scanner-aux (match-fn
cl-ppcre-20220220-git/specials.lisp:6407:6412:  (defun hyperdoc-lookup (symbol type)
cl-ppcre-20220220-git/util.lisp:4832:4837:(defun digit-char-p (chr)
cl-ppcre-20220220-git/util.lisp:5124:5129:(defun word-char-p (chr)
cl-ppcre-20220220-git/util.lisp:5589:5594:(defun whitespacep (chr)
cl-ppcre-20220220-git/util.lisp:6328:6333:(defun nsubseq (sequence start &optional (end (length sequence)))
cl-ppcre-20220220-git/util.lisp:6636:6641:(defun normalize-var-list (var-list)
cl-ppcre-20220220-git/util.lisp:7072:7077:(defun string-list-to-simple-string (string-list)
cl-ppcre-20220220-git/util.lisp:7981:7986:(defun complement* (test-function)
