#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:cl-ppcre :searty) :silent t)
  )

(defpackage :ros.script.gen-makefile.3858336297
  (:use :cl))
(in-package :ros.script.gen-makefile.3858336297)

(defstruct system-dependency project name file dependencies directory)

(defun convert-system-name-to-object-name (string)
  (let* ((string (ppcre:regex-replace-all "_" string "__"))
         (string (ppcre:regex-replace-all "/" string "_"))
         (string (concatenate 'string string ".finish")))
    string))

(defun load-systems (systems.txt)
  (with-open-file (in systems.txt)
    (loop :with dep-table := (make-hash-table :test 'equal)
          :for line := (read-line in nil)
          :while line
          :unless (char= #\# (char line 0))
          :do (destructuring-bind (project system-file system-name &rest dependencies)
                  (uiop:split-string line)
                (declare (ignore system-file system-name))
                (setf (gethash project dep-table)
                      (union (gethash project dep-table)
                             dependencies
                             :test #'string=)))
          :finally (return dep-table))))

(defun to-object-file (name)
  (format nil "../~A/searty.db" name))

(defun resolve-directory (name directories)
  (let* ((regex (ppcre:create-scanner `(:sequence :start-anchor ,name)))
         (dir (loop :for dir :in directories
                    :when (ppcre:scan regex (searty:basename dir))
                    :return dir)))
    (assert dir nil "~A not found" name)
    dir))

(defun generate-makefile-from-system-dependencies (system-dependencies root-directory output-stream)
  (let ((dirs (sort (uiop:subdirectories root-directory)
                    #'>
                    :key (lambda (dir) (length (searty:basename dir))))))
    (maphash (lambda (system-name dependencies)
               (format output-stream "~A:" (to-object-file system-name))
               (when dependencies
                 (format output-stream "~{~A~^ ~}" (mapcar #'to-object-file dependencies)))
               (format output-stream "~&~C./searty-index.ros ~A~%" #\tab (resolve-directory system-name dirs)))
             system-dependencies)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (destructuring-bind (systems.txt root-directory output-file) argv
    (with-open-file (out output-file
                         :direction :output
                         :if-exists :supersede
                         :if-does-not-exist :create)
      (generate-makefile-from-system-dependencies (load-systems systems.txt)
                                                  root-directory
                                                  out))))

;;; vim: set ft=lisp lisp:
