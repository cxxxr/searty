#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:cl-ppcre :searty) :silent t)
  )

(defpackage :ros.script.gen-makefile.3858336297
  (:use :cl))
(in-package :ros.script.gen-makefile.3858336297)

(defstruct system-dependency project name file dependencies directory)

(defun convert-system-name-to-object-name (string)
  (let* ((string (ppcre:regex-replace-all "_" string "__"))
         (string (ppcre:regex-replace-all "/" string "_"))
         (string (concatenate 'string string ".finish")))
    string))

(defun load-systems.txt (systems.txt)
  (with-open-file (in systems.txt)
    (loop :for line := (read-line in nil)
          :while line
          :unless (char= #\# (char line 0))
          :collect (destructuring-bind (project system-file system-name &rest dependencies)
                       (uiop:split-string line)
                     (make-system-dependency :project project
                                             :name system-name
                                             :file system-file
                                             :dependencies dependencies)))))

(defun to-object-file (system-dependency)
  (format nil "../~A/searty.db" (searty:basename (system-dependency-directory system-dependency))))

(defun generate-makefile-from-system-dependencies (system-dependencies output-stream)
  (loop :for dep :in system-dependencies
        :for project-dir := (system-dependency-directory dep)
        :for deps := (mapcar #'convert-system-name-to-object-name (system-dependency-dependencies dep))
        :do (format output-stream "~A:" (to-object-file dep))
            (when deps
              (format output-stream " ~{~A~^ ~}" deps))
            (terpri output-stream)
            (format output-stream "~C./searty-index.ros ~A~%" #\tab project-dir)))

(defun resolve-directory (system-dependencies root-directory)
  (loop :for dir :in (uiop:subdirectories root-directory)
        :for dep :in system-dependencies
        :do (setf (system-dependency-directory dep) dir))
  system-dependencies)

(defun main (&rest argv)
  (declare (ignorable argv))
  (destructuring-bind (systems.txt root-directory output-file) argv
    (with-open-file (out output-file
                         :direction :output
                         :if-exists :supersede
                         :if-does-not-exist :create)
      (let ((system-dependencies (load-systems.txt systems.txt)))
        (resolve-directory system-dependencies root-directory)
        (generate-makefile-from-system-dependencies system-dependencies
                                                    out)))))

;;; vim: set ft=lisp lisp:
